#Скрипт для тестирования кода, написанного для Siemens Step 7.

#Что такое код для Siemens Step 7? В документации написано:
''' 
Список операторов (английский Statement List, STL) - это текстовый язык программирования, который может быть использован для создания операторной части логического блока. 
Синтаксис его операторов похож на язык ассемблера и состоит из команд, за которыми следуют адреса (операнды), на которые команда действует.

Из языков программирования, с помощью которых можно программировать контроллеры S7, список операторов наиболее близок к машинному коду MC7 процессора S7. 
Это значит, что при его использовании для программирования контроллеров S7, вы можете оптимизировать время исполнения и использование памяти.

Язык программирования список операторов имеет все необходимые элементы для создания всей программы пользователя. Он содержит обширный набор команд.
В вашем распоряжении имеется свыше 130 различных основных команд, а также широкий набор адресов. 
Функции и функциональные блоки позволяют структурировать вашу программу на список операторов, делая её более обозримой.

'''



import os   #Используется для очистки экрана

#Создать мой объект
class ПЛК_эмулятор:
    """ Этот класс устанавливает базовую структуру памяти и методы, необходимые для своего ПЛК """

    def __init__(self, акк1, акк2, mw100, mw110, mw120, mw130, mw150, mw160, mw170, mw200):     #В этом методе я определяю атрибуты, используя ключевое слово "self"
        self.аккумуляторы = [акк1, акк2]                                                        #Этот атрибут представляет два аккумулятора.
        self.память = [mw100, mw110, mw120, mw130, mw150, mw160, mw170, mw200]  #себя.память    #Этот атрибут представляет восемь адресов памяти, которые я определяю.
                                                                                                #MW будет слово памяти
    def Загрузить(self, параметры_нагрузкы):                                                    #Этот метод берёт значение из первого аккумулятора и перемещает его во второй аккумулятор, а затем передаёт переданное значение в первый аккумулятор.
        match параметры_нагрузкы:           
            case 101:                                                                           #Я представляю каждый адрес памяти произвольным числом.
                self.аккумуляторы[1] = self.аккумуляторы[0]
                self.аккумуляторы[0] = self.память[0]
            case 102: 
                self.аккумуляторы[1] = self.аккумуляторы[0]
                self.аккумуляторы[0] = self.память[1]
            case 103:
                self.аккумуляторы[1] = self.аккумуляторы[0]
                self.аккумуляторы[0] = self.память[2]
            case 104:
                self.аккумуляторы[1] = self.аккумуляторы[0]
                self.аккумуляторы[0] = self.память[3]            
            case 105:
                self.аккумуляторы[1] = self.аккумуляторы[0]
                self.аккумуляторы[0] = self.память[4]            
            case 106:
                self.аккумуляторы[1] = self.аккумуляторы[0]
                self.аккумуляторы[0] = self.память[5]
            case 107:
                self.аккумуляторы[1] = self.аккумуляторы[0]
                self.аккумуляторы[0] = self.память[6]
            case 108:
                self.аккумуляторы[1] = self.аккумуляторы[0]
                self.аккумуляторы[0] = self.память[7]
            case unknown_command:                                                               #Если полученное число не совпадает с адресом памяти, то загружаем само число в аккумулятор 1.
                self.аккумуляторы[1] = self.аккумуляторы[0]                                     
                self.аккумуляторы[0] = параметры_нагрузкы

        
    def Передать(self, адрес_памяти):                                                           #Этот метод берёт значение из первого аккумулятора и перемещает его в переданный адрес памяти, который в ПЛК Siemens представляет собой физическое расположение памяти.
        match адрес_памяти:
            case 101:
                self.память[0] = self.аккумуляторы[0]
            case 102:
                self.память[1] = self.аккумуляторы[0]
            case 103:
                self.память[2] = self.аккумуляторы[0]
            case 104:
                self.память[3] = self.аккумуляторы[0]
            case 105:
                self.память[4] = self.аккумуляторы[0]
            case 106:
                self.память[5] = self.аккумуляторы[0]
            case 107:
                self.память[6] = self.аккумуляторы[0]
            case 108:
                self.память[7] = self.аккумуляторы[0]
        
    def Добавить(self):                                                                         #Этот метод складывает значения в первом аккумуляторе и втором аккумуляторе и сохраняет результат в первом аккумуляторе.
        #В документации написано:
        '''
        +I ->   Складывает содержимое младших слов аккумуляторов 1 и 2 и сохраняет результат в младшем слове аккумулятора 1.
        '''
        self.аккумуляторы[0] = self.аккумуляторы[0] + self.аккумуляторы[1]
        
    def Делить(self):                                                                           #Этот метод делит аккумулятор два на аккумулятор один и сохраняет результат в аккумуляторе один.
        #В документации написано:
        '''
        /I ->   Делит содержимое младшего слова аккумулятора 2 на содержимое младшего слова аккумулятора 1. 
                Результат сохраняется в младшем слове аккумудятора 1.
                Целый остаток от деления сохраняется в старшем слове аккумулятора 1.
        '''
        self.аккумуляторы[0] = self.аккумуляторы[1] / self.аккумуляторы[0]
        
    def Умножить(self):                                                                         #Этот метод умножает первый аккумулятор на второй аккумулятор и сохраняет результат в первом аккумуляторе.
        #В документации написано:
        '''
        *I ->   Перемножает содержимое младших слов аккумуляторов 1 и 2 и сохраняет результат в аккумуляторе 1.
        '''
        self.аккумуляторы[0] = self.аккумуляторы[1] * self.аккумуляторы[0]
        

#Для этого простого примера я просто жестко запрограммирую необходимые значения:
#Высота = 20 метров, Время 1 = 3 секунды, Время 2 = 2 секунды, Время 3 = 1 секунда.

плк1 = ПЛК_эмулятор(0.1, 0.2, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 2.0)       #Создать экземпляр своего объекта с инициализированными значениями

        
#Изменить переменные, чтобы сделать макет ближе к STL
T = плк1.Передать       
L = плк1.Загрузить      
myAdd = плк1.Добавить   
div = плк1.Делить       
mult = плк1.Умножить   

MW100 = 101             #Памятное слово сто
MW110 = 102
MW120 = 103
MW130 = 104
MW150 = 105
MW160 = 106
MW170 = 107
MW200 = 108

os.system('cls')        #Очистить экран автоматически, потому что я не люблю делать это во время тестирования.

print()
print("\nНачальные значение: ", плк1.память)


#Начать логику STL ------------------------------------------------



#___Установить высоту
L(20)                                               #Копировать это значение из аккумулятора 1 в аккумулятор 2, и загрузить 20 в аккумулятор 1. 
T(MW100)                                            #Передать 20 из акуумулятора 1 в слово данных 100.

#___Установить три измеренных значения времени
L(1)                                                #Копировать 20 из аккумулятора 1 в аккумулятор 2, и загрузить 1 в аккумулятор 1.
T(MW110)                                            #Передать 1 из аккумулятора 1 в слово данных 110.
L(2)                                                #Копировать 1 из аккумулятора 1 в аккумулятор 2, и загрузить 2 в аккумулятор 1.
T(MW120)                                            #Передать 2 из аккумулятора 1 в слово данных 120.
L(3)                                                #Копировать 2 из аккумулятора 1 в аккумулятор 2, и загрузить 3 в аккумулятор 1.
T(MW130)                                            #Передать 3 из аккумулятора 1 в слова данных 130.          

#___Вычислить среднее время
L(MW110)                                            #Копировать 3 из аккумулятора 1 в аккумулятор 2, и загрузить 1 из слова данных 110 в аккумулятор 1.
L(MW120)                                            #                               
myAdd()                                             #
L(MW130)                                            #
myAdd()                                             #
L(3)                                                #
div()                                               #
T(MW150)                                            #

#___Подсчитать результат математики
L(2)                                                #
L(MW100)                                            #
mult()                                              #
T(MW160)                                            #
L(MW150)                                            #
L(MW150)                                            #
mult()                                              #
T(MW170)                                            #
L(MW160)                                            #
L(MW170)                                            #
div()                                               #
T(MW200)                                            #

#Вывести результаты в консоль
print("\nКонечные значения: ", плк1.память)
print("\nЭкспериментально измеренное и рассчитанное значение g равно: ", плк1.память[7])

print()





























